#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build 360T7

on:
  workflow_dispatch:
   schedule:
     - cron: '0 4 * * *'

env:
  REPO_URL: https://github.com/NekokeCore/immortalwrt-mt798x-24.10
  REPO_BRANCH: openwrt-24.10
  FEEDS_CONF: 360T7/feeds.conf.default
  CONFIG_FILE: 360T7/.config
  DIY_P1_SH: 360T7/diy1.sh
  DIY_P2_SH: 360T7/diy2.sh
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  PUSHPLUS_TOKEN: ${{ secrets.PUSHPLUS_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查项目分支
      uses: actions/checkout@main

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt -yqq update
        sudo -E apt -yqq full-upgrade
        sudo -E apt -yqq autoremove --purge
        sudo -E apt -yqq autoclean
        sudo -E apt -yqq clean
        sudo -E apt -yqq install dos2unix libfuse-dev
        sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "FIRMWARE_VERSION=$(date +"%y%m%d")" >> $GITHUB_ENV
        echo "START_DATE=$(date +'%Y年%m月%d日 %H点%M分')" >> $GITHUB_ENV

    - name: PushPlus 通知
      if: env.PUSHPLUS_TOKEN
      continue-on-error: true
      run: |
        curl -k -d "title=开始编译360T7固件" -d "content=编译固件版本：${{ env.FIRMWARE_VERSION }}%0A编译开始时间：${{ env.START_DATE }}" -d "token=${{ env.PUSHPLUS_TOKEN }}&channel=cp&webhook=server" "http://www.pushplus.plus/send"
    
    - name: 下载源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载软件源
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新并安装软件源
      run: cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e 360T7/files ] && mv 360T7/files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s || (curl -k -d "title=360T7固件编译失败" -d "content=编译固件版本：${{ env.FIRMWARE_VERSION }}%0A编译开始时间：${{ env.START_DATE }}%0A编译结束时间：$(date +'%Y年%m月%d日 %H点%M分')" -d "token=${{ env.PUSHPLUS_TOKEN }}&channel=cp&webhook=server" "http://www.pushplus.plus/send")
        echo "status=success" >> $GITHUB_OUTPUT

     - name: Check space usage 检查磁盘空间
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory 上传bin目录（视配置）
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }} # 上传文件名
        path: openwrt/bin # 上传路径

    - name: Organize files 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages # 删除packages目录
        rm -rf feeds.buildinfo # 删除feeds构建信息
        rm -rf sha256sums # 删除校验文件
        rm -rf version.buildinfo # 删除版本信息
        rm -rf profiles.json # 删除profiles文件
        rm -rf *.manifest # 删除manifest文件
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV # 设置固件路径变量
        echo "status=success" >> $GITHUB_OUTPUT # 输出状态

    - name: Upload firmware directory 上传固件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }} # 上传文件名
        path: ${{ env.FIRMWARE }} # 上传路径

    - name: Upload firmware to cowtransfer 上传到Cowtransfer（视配置）
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh # 下载文件传输脚本
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log # 上传文件
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)" # 输出链接
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT # 保存链接

    - name: Upload firmware to WeTransfer  上传到WeTransfer（视配置）
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh # 下载文件传输脚本
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log # 上传文件
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)" # 输出链接
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT # 保存链接

    - name: Generate release tag 生成GitHub Release标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT # 设置标签名
        touch release.txt # 创建发布说明文件
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt # 添加Cowtransfer链接
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt # 添加WeTransfer链接
        echo "status=success" >> $GITHUB_OUTPUT # 输出状态

    - name: Upload firmware to release 上传固件到GitHub Release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub令牌
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }} # 标签名
        body_path: release.txt # 发布说明文件
        files: ${{ env.FIRMWARE }}/* # 上传固件文件

    - name: Remove old artifacts 删除过期的Artifacts
      uses: c-hive/gha-remove-artifacts@v1
      with:
        age: '15 days' # 保留15天的Artifacts
        # skip-tags: true # 跳过带标签的（已注释）
        # skip-recent: 5 # 保留最近5个（已注释）

    - name: Delete workflow runs 删除旧的工作流记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ github.token }} # GitHub令牌
        repository: ${{ github.repository }} # 仓库名称
        retain_days: 1 # 保留1天的记录
        keep_minimum_runs: 1 # 至少保留1次运行

    - name: Remove old Releases 删除旧的GitHub Release
      uses: dev-drprasad/delete-older-releases@v0.3.4
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 6 # 保留最新的6个Release
        delete_tags: true # 删除对应的标签
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub令牌
